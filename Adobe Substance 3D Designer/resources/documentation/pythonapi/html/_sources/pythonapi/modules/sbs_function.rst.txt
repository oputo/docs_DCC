sbs::function
=============

.. contents:: :local:

Definitions:
------------
[1/84] 'sbs::function::const_float1'
####################################
   * Label: 'Float'
   * Description: 'The <b>Float</b> function defines a constant floating value'
   * SDPropertyCategory = 'Input'
      * '__constant__' = SDValueFloat(float(0))
         * Label: 'Constant'
         * Types:
            * 'float' (SDTypeFloat)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Float'
         * Description: 'The <b>Float</b> function defines a constant floating value'
         * Types:
            * 'float' (SDTypeFloat)

[2/84] 'sbs::function::const_float2'
####################################
   * Label: 'Float2'
   * Description: 'The <b>Float2</b> function defines a constant two floating values vector'
   * SDPropertyCategory = 'Input'
      * '__constant__' = SDValueFloat2(float2(0,0))
         * Label: 'Constant'
         * Types:
            * 'float2' (SDTypeFloat2)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Float2'
         * Description: 'The <b>Float2</b> function defines a constant two floating values vector'
         * Types:
            * 'float2' (SDTypeFloat2)

[3/84] 'sbs::function::const_float3'
####################################
   * Label: 'Float3'
   * Description: 'The <b>Float3</b> function defines a constant three floating values vector'
   * SDPropertyCategory = 'Input'
      * '__constant__' = SDValueFloat3(float3(0,0,0))
         * Label: 'Constant'
         * Types:
            * 'float3' (SDTypeFloat3)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Float3'
         * Description: 'The <b>Float3</b> function defines a constant three floating values vector'
         * Types:
            * 'float3' (SDTypeFloat3)

[4/84] 'sbs::function::const_float4'
####################################
   * Label: 'Float4'
   * Description: 'The <b>Float4</b> function defines a constant four floating values vector'
   * SDPropertyCategory = 'Input'
      * '__constant__' = SDValueFloat4(float4(0,0,0,0))
         * Label: 'Constant'
         * Types:
            * 'float4' (SDTypeFloat4)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Float4'
         * Description: 'The <b>Float4</b> function defines a constant four floating values vector'
         * Types:
            * 'float4' (SDTypeFloat4)

[5/84] 'sbs::function::const_int1'
##################################
   * Label: 'Integer'
   * Description: 'The <b>Integer</b> function defines a constant integer'
   * SDPropertyCategory = 'Input'
      * '__constant__' = SDValueInt(int(0))
         * Label: 'Constant'
         * Types:
            * 'int' (SDTypeInt)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Integer'
         * Description: 'The <b>Integer</b> function defines a constant integer'
         * Types:
            * 'int' (SDTypeInt)

[6/84] 'sbs::function::const_int2'
##################################
   * Label: 'Integer2'
   * Description: 'The <b>Integer2</b> function defines a constant two integers vector'
   * SDPropertyCategory = 'Input'
      * '__constant__' = SDValueInt2(int2(0,0))
         * Label: 'Constant'
         * Types:
            * 'int2' (SDTypeInt2)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Integer2'
         * Description: 'The <b>Integer2</b> function defines a constant two integers vector'
         * Types:
            * 'int2' (SDTypeInt2)

[7/84] 'sbs::function::const_int3'
##################################
   * Label: 'Integer3'
   * Description: 'The <b>Integer3</b> function defines a constant three integers vector'
   * SDPropertyCategory = 'Input'
      * '__constant__' = SDValueInt3(int3(0,0,0))
         * Label: 'Constant'
         * Types:
            * 'int3' (SDTypeInt3)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Integer3'
         * Description: 'The <b>Integer3</b> function defines a constant three integers vector'
         * Types:
            * 'int3' (SDTypeInt3)

[8/84] 'sbs::function::const_int4'
##################################
   * Label: 'Integer4'
   * Description: 'The <b>Integer4</b> function defines a constant four integers vector'
   * SDPropertyCategory = 'Input'
      * '__constant__' = SDValueInt4(int4(0,0,0,0))
         * Label: 'Constant'
         * Types:
            * 'int4' (SDTypeInt4)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Integer4'
         * Description: 'The <b>Integer4</b> function defines a constant four integers vector'
         * Types:
            * 'int4' (SDTypeInt4)

[9/84] 'sbs::function::const_bool'
##################################
   * Label: 'Boolean'
   * Description: 'The <b>Boolean</b> function defines a constant boolean'
   * SDPropertyCategory = 'Input'
      * '__constant__' = SDValueBool(bool(false))
         * Label: 'Constant'
         * Types:
            * 'bool' (SDTypeBool)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Boolean'
         * Description: 'The <b>Boolean</b> function defines a constant boolean'
         * Types:
            * 'bool' (SDTypeBool)

[10/84] 'sbs::function::const_string'
#####################################
   * Label: 'String'
   * Description: 'The <b>Path</b> function defines a constant string'
   * SDPropertyCategory = 'Input'
      * '__constant__' = SDValueString(string())
         * Label: 'Constant'
         * Types:
            * 'string' (SDTypeString)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'String'
         * Description: 'The <b>Path</b> function defines a constant string'
         * Types:
            * 'string' (SDTypeString)

[11/84] 'sbs::function::vector2'
################################
   * Label: 'Vector Float2'
   * Description: 'The <b>Vector Float2</b> function casts two floating values in a vector with two coordinates'
   * SDPropertyCategory = 'Input'
      * 'componentsin' [CONNECTABLE, READ_ONLY]
         * Label: 'In'
         * Types:
            * 'float' (SDTypeFloat)

      * 'componentslast' [CONNECTABLE, READ_ONLY]
         * Label: 'Last'
         * Types:
            * 'float' (SDTypeFloat)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Vector Float2'
         * Description: 'The <b>Vector Float2</b> function casts two floating values in a vector with two coordinates'
         * Types:
            * 'float2' (SDTypeFloat2)

[12/84] 'sbs::function::vector3'
################################
   * Label: 'Vector Float3'
   * Description: 'The <b>Vector Float3</b> function casts two floating values into a vector with three coordinates'
   * SDPropertyCategory = 'Input'
      * 'componentsin' [CONNECTABLE, READ_ONLY]
         * Label: 'In'
         * Types:
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)

      * 'componentslast' [CONNECTABLE, READ_ONLY]
         * Label: 'Last'
         * Types:
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Vector Float3'
         * Description: 'The <b>Vector Float3</b> function casts two floating values into a vector with three coordinates'
         * Types:
            * 'float3' (SDTypeFloat3)

[13/84] 'sbs::function::vector4'
################################
   * Label: 'Vector Float4'
   * Description: 'The <b>Vector Float4</b> function casts two floating values into a vector with four coordinates'
   * SDPropertyCategory = 'Input'
      * 'componentsin' [CONNECTABLE, READ_ONLY]
         * Label: 'In'
         * Types:
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)

      * 'componentslast' [CONNECTABLE, READ_ONLY]
         * Label: 'Last'
         * Types:
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Vector Float4'
         * Description: 'The <b>Vector Float4</b> function casts two floating values into a vector with four coordinates'
         * Types:
            * 'float4' (SDTypeFloat4)

[14/84] 'sbs::function::swizzle1'
#################################
   * Label: 'Swizzle Float1'
   * Description: 'The <b>Swizzle Float1</b> function extracts a single specified coordinate from the input Vector'
   * SDPropertyCategory = 'Input'
      * 'vector' [CONNECTABLE, READ_ONLY]
         * Label: 'Vector'
         * Types:
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

      * '__constant__' = SDValueInt(int(0))
         * Label: 'Constant'
         * Types:
            * 'int' (SDTypeInt)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Swizzle Float1'
         * Description: 'The <b>Swizzle Float1</b> function extracts a single specified coordinate from the input Vector'
         * Types:
            * 'float' (SDTypeFloat)

[15/84] 'sbs::function::swizzle2'
#################################
   * Label: 'Swizzle Float2'
   * Description: 'The <b>Swizzle Float2</b> function extracts two specified coordinates from the input Vector'
   * SDPropertyCategory = 'Input'
      * 'vector' [CONNECTABLE, READ_ONLY]
         * Label: 'Vector'
         * Types:
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

      * '__constant__' = SDValueInt2(int2(0,0))
         * Label: 'Constant'
         * Types:
            * 'int2' (SDTypeInt2)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Swizzle Float2'
         * Description: 'The <b>Swizzle Float2</b> function extracts two specified coordinates from the input Vector'
         * Types:
            * 'float2' (SDTypeFloat2)

[16/84] 'sbs::function::swizzle3'
#################################
   * Label: 'Swizzle Float3'
   * Description: 'The <b>Swizzle Float3</b> function extracts three specified coordinates from the input Vector'
   * SDPropertyCategory = 'Input'
      * 'vector' [CONNECTABLE, READ_ONLY]
         * Label: 'Vector'
         * Types:
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

      * '__constant__' = SDValueInt3(int3(0,0,0))
         * Label: 'Constant'
         * Types:
            * 'int3' (SDTypeInt3)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Swizzle Float3'
         * Description: 'The <b>Swizzle Float3</b> function extracts three specified coordinates from the input Vector'
         * Types:
            * 'float3' (SDTypeFloat3)

[17/84] 'sbs::function::swizzle4'
#################################
   * Label: 'Swizzle Float4'
   * Description: 'The <b>Swizzle Float4</b> function extracts four specified coordinates from the input Vector'
   * SDPropertyCategory = 'Input'
      * 'vector' [CONNECTABLE, READ_ONLY]
         * Label: 'Vector'
         * Types:
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

      * '__constant__' = SDValueInt4(int4(0,0,0,0))
         * Label: 'Constant'
         * Types:
            * 'int4' (SDTypeInt4)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Swizzle Float4'
         * Description: 'The <b>Swizzle Float4</b> function extracts four specified coordinates from the input Vector'
         * Types:
            * 'float4' (SDTypeFloat4)

[18/84] 'sbs::function::ivector2'
#################################
   * Label: 'Vector Integer2'
   * Description: 'The <b>Vector Integer2</b> function casts two integer values in a vector with two coordinates'
   * SDPropertyCategory = 'Input'
      * 'componentsin' [CONNECTABLE, READ_ONLY]
         * Label: 'In'
         * Types:
            * 'int' (SDTypeInt)

      * 'componentslast' [CONNECTABLE, READ_ONLY]
         * Label: 'Last'
         * Types:
            * 'int' (SDTypeInt)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Vector Integer2'
         * Description: 'The <b>Vector Integer2</b> function casts two integer values in a vector with two coordinates'
         * Types:
            * 'int2' (SDTypeInt2)

[19/84] 'sbs::function::ivector3'
#################################
   * Label: 'Vector Integer3'
   * Description: 'The <b>Vector Integer3</b> function casts two integer values in a vector with three coordinates'
   * SDPropertyCategory = 'Input'
      * 'componentsin' [CONNECTABLE, READ_ONLY]
         * Label: 'In'
         * Types:
            * 'int' (SDTypeInt)
            * 'int2' (SDTypeInt2)

      * 'componentslast' [CONNECTABLE, READ_ONLY]
         * Label: 'Last'
         * Types:
            * 'int' (SDTypeInt)
            * 'int2' (SDTypeInt2)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Vector Integer3'
         * Description: 'The <b>Vector Integer3</b> function casts two integer values in a vector with three coordinates'
         * Types:
            * 'int3' (SDTypeInt3)

[20/84] 'sbs::function::ivector4'
#################################
   * Label: 'Vector Integer4'
   * Description: 'The <b>Vector Integer4</b> function casts two integer values in a vector with four coordinates'
   * SDPropertyCategory = 'Input'
      * 'componentsin' [CONNECTABLE, READ_ONLY]
         * Label: 'In'
         * Types:
            * 'int' (SDTypeInt)
            * 'int2' (SDTypeInt2)
            * 'int3' (SDTypeInt3)

      * 'componentslast' [CONNECTABLE, READ_ONLY]
         * Label: 'Last'
         * Types:
            * 'int' (SDTypeInt)
            * 'int2' (SDTypeInt2)
            * 'int3' (SDTypeInt3)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Vector Integer4'
         * Description: 'The <b>Vector Integer4</b> function casts two integer values in a vector with four coordinates'
         * Types:
            * 'int4' (SDTypeInt4)

[21/84] 'sbs::function::iswizzle1'
##################################
   * Label: 'Swizzle Integer1'
   * Description: 'The <b>Swizzle Integer1</b> function extracts a single specified integer coordinate from the input Vector'
   * SDPropertyCategory = 'Input'
      * 'vector' [CONNECTABLE, READ_ONLY]
         * Label: 'Vector'
         * Types:
            * 'int' (SDTypeInt)
            * 'int2' (SDTypeInt2)
            * 'int3' (SDTypeInt3)
            * 'int4' (SDTypeInt4)

      * '__constant__' = SDValueInt(int(0))
         * Label: 'Constant'
         * Types:
            * 'int' (SDTypeInt)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Swizzle Integer1'
         * Description: 'The <b>Swizzle Integer1</b> function extracts a single specified integer coordinate from the input Vector'
         * Types:
            * 'int' (SDTypeInt)

[22/84] 'sbs::function::iswizzle2'
##################################
   * Label: 'Swizzle Integer2'
   * Description: 'The <b>Swizzle Integer2</b> function extracts two specified integer coordinates from the input Vector'
   * SDPropertyCategory = 'Input'
      * 'vector' [CONNECTABLE, READ_ONLY]
         * Label: 'Vector'
         * Types:
            * 'int' (SDTypeInt)
            * 'int2' (SDTypeInt2)
            * 'int3' (SDTypeInt3)
            * 'int4' (SDTypeInt4)

      * '__constant__' = SDValueInt2(int2(0,0))
         * Label: 'Constant'
         * Types:
            * 'int2' (SDTypeInt2)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Swizzle Integer2'
         * Description: 'The <b>Swizzle Integer2</b> function extracts two specified integer coordinates from the input Vector'
         * Types:
            * 'int2' (SDTypeInt2)

[23/84] 'sbs::function::iswizzle3'
##################################
   * Label: 'Swizzle Integer3'
   * Description: 'The <b>Swizzle Integer3</b> function extracts three specified integer coordinates from the input Vector'
   * SDPropertyCategory = 'Input'
      * 'vector' [CONNECTABLE, READ_ONLY]
         * Label: 'Vector'
         * Types:
            * 'int' (SDTypeInt)
            * 'int2' (SDTypeInt2)
            * 'int3' (SDTypeInt3)
            * 'int4' (SDTypeInt4)

      * '__constant__' = SDValueInt3(int3(0,0,0))
         * Label: 'Constant'
         * Types:
            * 'int3' (SDTypeInt3)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Swizzle Integer3'
         * Description: 'The <b>Swizzle Integer3</b> function extracts three specified integer coordinates from the input Vector'
         * Types:
            * 'int3' (SDTypeInt3)

[24/84] 'sbs::function::iswizzle4'
##################################
   * Label: 'Swizzle Integer4'
   * Description: 'The <b>Swizzle Integer4</b> function extracts four specified integer coordinates from the input Vector'
   * SDPropertyCategory = 'Input'
      * 'vector' [CONNECTABLE, READ_ONLY]
         * Label: 'Vector'
         * Types:
            * 'int' (SDTypeInt)
            * 'int2' (SDTypeInt2)
            * 'int3' (SDTypeInt3)
            * 'int4' (SDTypeInt4)

      * '__constant__' = SDValueInt4(int4(0,0,0,0))
         * Label: 'Constant'
         * Types:
            * 'int4' (SDTypeInt4)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Swizzle Integer4'
         * Description: 'The <b>Swizzle Integer4</b> function extracts four specified integer coordinates from the input Vector'
         * Types:
            * 'int4' (SDTypeInt4)

[25/84] 'sbs::function::set'
############################
   * Label: 'Set'
   * Description: 'The <b>Set</b> node lets you assign a value to a <i>variable</i> with a custom name, and outputs the same value. If the variable does not exist, it is initialised. If it does, its value is updated.'
   * SDPropertyCategory = 'Input'
      * 'value' [CONNECTABLE, READ_ONLY]
         * Label: 'Value'
         * Types:
            * 'bool' (SDTypeBool)
            * 'int' (SDTypeInt)
            * 'int2' (SDTypeInt2)
            * 'int3' (SDTypeInt3)
            * 'int4' (SDTypeInt4)
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)
            * 'string' (SDTypeString)

      * '__constant__' = SDValueString(string())
         * Label: 'Constant'
         * Types:
            * 'string' (SDTypeString)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Set'
         * Description: 'The <b>Set</b> node lets you assign a value to a <i>variable</i> with a custom name, and outputs the same value. If the variable does not exist, it is initialised. If it does, its value is updated.'
         * Types:
            * 'bool' (SDTypeBool)
            * 'int' (SDTypeInt)
            * 'int2' (SDTypeInt2)
            * 'int3' (SDTypeInt3)
            * 'int4' (SDTypeInt4)
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)
            * 'string' (SDTypeString)

[26/84] 'sbs::function::get_float1'
###################################
   * Label: 'Get Float'
   * Description: 'The <b>Get Float</b> function accesses a function's or graph's  floating value input(s)'
   * SDPropertyCategory = 'Input'
      * '__constant__' = SDValueString(string())
         * Label: 'Constant'
         * Types:
            * 'string' (SDTypeString)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Get Float'
         * Description: 'The <b>Get Float</b> function accesses a function's or graph's  floating value input(s)'
         * Types:
            * 'float' (SDTypeFloat)

[27/84] 'sbs::function::get_float2'
###################################
   * Label: 'Get Float2'
   * Description: 'The <b>Get Float2</b> function accesses a function's or graph's two floating values vector input(s)'
   * SDPropertyCategory = 'Input'
      * '__constant__' = SDValueString(string())
         * Label: 'Constant'
         * Types:
            * 'string' (SDTypeString)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Get Float2'
         * Description: 'The <b>Get Float2</b> function accesses a function's or graph's two floating values vector input(s)'
         * Types:
            * 'float2' (SDTypeFloat2)

[28/84] 'sbs::function::get_float3'
###################################
   * Label: 'Get Float3'
   * Description: 'The <b>Get Float3</b> function accesses a function's or graph's three floating values vector input(s)'
   * SDPropertyCategory = 'Input'
      * '__constant__' = SDValueString(string())
         * Label: 'Constant'
         * Types:
            * 'string' (SDTypeString)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Get Float3'
         * Description: 'The <b>Get Float3</b> function accesses a function's or graph's three floating values vector input(s)'
         * Types:
            * 'float3' (SDTypeFloat3)

[29/84] 'sbs::function::get_float4'
###################################
   * Label: 'Get Float4'
   * Description: 'The <b>Get Float4</b> function accesses a function's or graph's four floating values vector input(s)'
   * SDPropertyCategory = 'Input'
      * '__constant__' = SDValueString(string())
         * Label: 'Constant'
         * Types:
            * 'string' (SDTypeString)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Get Float4'
         * Description: 'The <b>Get Float4</b> function accesses a function's or graph's four floating values vector input(s)'
         * Types:
            * 'float4' (SDTypeFloat4)

[30/84] 'sbs::function::get_integer1'
#####################################
   * Label: 'Get Integer'
   * Description: 'The <b>Get Integer</b> function accesses a function's or graph's integer input(s)'
   * SDPropertyCategory = 'Input'
      * '__constant__' = SDValueString(string())
         * Label: 'Constant'
         * Types:
            * 'string' (SDTypeString)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Get Integer'
         * Description: 'The <b>Get Integer</b> function accesses a function's or graph's integer input(s)'
         * Types:
            * 'int' (SDTypeInt)

[31/84] 'sbs::function::get_integer2'
#####################################
   * Label: 'Get Integer2'
   * Description: 'The <b>Get Integer2</b> function accesses a function's or graph's two integers vector input(s)'
   * SDPropertyCategory = 'Input'
      * '__constant__' = SDValueString(string())
         * Label: 'Constant'
         * Types:
            * 'string' (SDTypeString)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Get Integer2'
         * Description: 'The <b>Get Integer2</b> function accesses a function's or graph's two integers vector input(s)'
         * Types:
            * 'int2' (SDTypeInt2)

[32/84] 'sbs::function::get_integer3'
#####################################
   * Label: 'Get Integer3'
   * Description: 'The <b>Get Integer3</b> function accesses a function's or graph's three integers vector input(s)'
   * SDPropertyCategory = 'Input'
      * '__constant__' = SDValueString(string())
         * Label: 'Constant'
         * Types:
            * 'string' (SDTypeString)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Get Integer3'
         * Description: 'The <b>Get Integer3</b> function accesses a function's or graph's three integers vector input(s)'
         * Types:
            * 'int3' (SDTypeInt3)

[33/84] 'sbs::function::get_integer4'
#####################################
   * Label: 'Get Integer4'
   * Description: 'The <b>Get Integer4</b> function accesses a function's or graph's four integers vector input(s)'
   * SDPropertyCategory = 'Input'
      * '__constant__' = SDValueString(string())
         * Label: 'Constant'
         * Types:
            * 'string' (SDTypeString)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Get Integer4'
         * Description: 'The <b>Get Integer4</b> function accesses a function's or graph's four integers vector input(s)'
         * Types:
            * 'int4' (SDTypeInt4)

[34/84] 'sbs::function::get_bool'
#################################
   * Label: 'Get Boolean'
   * Description: 'The <b>Get Boolean</b> function accesses a function's or graph's boolean input(s)'
   * SDPropertyCategory = 'Input'
      * '__constant__' = SDValueString(string())
         * Label: 'Constant'
         * Types:
            * 'string' (SDTypeString)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Get Boolean'
         * Description: 'The <b>Get Boolean</b> function accesses a function's or graph's boolean input(s)'
         * Types:
            * 'bool' (SDTypeBool)

[35/84] 'sbs::function::get_string'
###################################
   * Label: 'Get String'
   * Description: 'The <b>Get String</b> function accesses a function's or graph's string input(s)'
   * SDPropertyCategory = 'Input'
      * '__constant__' = SDValueString(string())
         * Label: 'Constant'
         * Types:
            * 'string' (SDTypeString)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Get String'
         * Description: 'The <b>Get String</b> function accesses a function's or graph's string input(s)'
         * Types:
            * 'string' (SDTypeString)

[36/84] 'sbs::function::samplelum'
##################################
   * Label: 'Sample Gray'
   * Description: 'Returns the grayscale pixel value of input image.'
   * SDPropertyCategory = 'Input'
      * 'pos' [CONNECTABLE, READ_ONLY]
         * Label: 'Position'
         * Types:
            * 'float2' (SDTypeFloat2)

      * '__constant__' = SDValueInt2(int2(0,0))
         * Label: 'Constant'
         * Types:
            * 'int2' (SDTypeInt2)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Sample Gray'
         * Description: 'Returns the grayscale pixel value of input image.'
         * Types:
            * 'float' (SDTypeFloat)

[37/84] 'sbs::function::samplecol'
##################################
   * Label: 'Sample Color'
   * Description: 'Returns the color pixel value of input image.'
   * SDPropertyCategory = 'Input'
      * 'pos' [CONNECTABLE, READ_ONLY]
         * Label: 'Position'
         * Types:
            * 'float2' (SDTypeFloat2)

      * '__constant__' = SDValueInt2(int2(0,0))
         * Label: 'Constant'
         * Types:
            * 'int2' (SDTypeInt2)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Sample Color'
         * Description: 'Returns the color pixel value of input image.'
         * Types:
            * 'float4' (SDTypeFloat4)

[38/84] 'sbs::function::tofloat'
################################
   * Label: 'To Float'
   * Description: 'The <b>To Float</b> function converts integer to floating value'
   * SDPropertyCategory = 'Input'
      * 'value' [CONNECTABLE, READ_ONLY]
         * Label: 'Value'
         * Types:
            * 'int' (SDTypeInt)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'To Float'
         * Description: 'The <b>To Float</b> function converts integer to floating value'
         * Types:
            * 'float' (SDTypeFloat)

[39/84] 'sbs::function::tofloat2'
#################################
   * Label: 'To Float2'
   * Description: 'The <b>To Float2</b> function converts two integer values to floating point values'
   * SDPropertyCategory = 'Input'
      * 'value' [CONNECTABLE, READ_ONLY]
         * Label: 'Value'
         * Types:
            * 'int2' (SDTypeInt2)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'To Float2'
         * Description: 'The <b>To Float2</b> function converts two integer values to floating point values'
         * Types:
            * 'float2' (SDTypeFloat2)

[40/84] 'sbs::function::tofloat3'
#################################
   * Label: 'To Float3'
   * Description: 'The <b>To Float3</b> function converts three integer values to floating point values'
   * SDPropertyCategory = 'Input'
      * 'value' [CONNECTABLE, READ_ONLY]
         * Label: 'Value'
         * Types:
            * 'int3' (SDTypeInt3)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'To Float3'
         * Description: 'The <b>To Float3</b> function converts three integer values to floating point values'
         * Types:
            * 'float3' (SDTypeFloat3)

[41/84] 'sbs::function::tofloat4'
#################################
   * Label: 'To Float4'
   * Description: 'The <b>To Float4</b> function converts four integer values to floating point values'
   * SDPropertyCategory = 'Input'
      * 'value' [CONNECTABLE, READ_ONLY]
         * Label: 'Value'
         * Types:
            * 'int4' (SDTypeInt4)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'To Float4'
         * Description: 'The <b>To Float4</b> function converts four integer values to floating point values'
         * Types:
            * 'float4' (SDTypeFloat4)

[42/84] 'sbs::function::toint1'
###############################
   * Label: 'To Integer'
   * Description: 'The <b>To Integer</b> function converts floating value to integer'
   * SDPropertyCategory = 'Input'
      * 'value' [CONNECTABLE, READ_ONLY]
         * Label: 'Value'
         * Types:
            * 'float' (SDTypeFloat)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'To Integer'
         * Description: 'The <b>To Integer</b> function converts floating value to integer'
         * Types:
            * 'int' (SDTypeInt)

[43/84] 'sbs::function::toint2'
###############################
   * Label: 'To Integer2'
   * Description: 'The <b>To Integer2</b> function converts two floating values to integers '
   * SDPropertyCategory = 'Input'
      * 'value' [CONNECTABLE, READ_ONLY]
         * Label: 'Value'
         * Types:
            * 'float2' (SDTypeFloat2)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'To Integer2'
         * Description: 'The <b>To Integer2</b> function converts two floating values to integers '
         * Types:
            * 'int2' (SDTypeInt2)

[44/84] 'sbs::function::toint3'
###############################
   * Label: 'To Integer3'
   * Description: 'The <b>To Integer3</b> function converts three floating values to integers '
   * SDPropertyCategory = 'Input'
      * 'value' [CONNECTABLE, READ_ONLY]
         * Label: 'Value'
         * Types:
            * 'float3' (SDTypeFloat3)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'To Integer3'
         * Description: 'The <b>To Integer3</b> function converts three floating values to integers '
         * Types:
            * 'int3' (SDTypeInt3)

[45/84] 'sbs::function::toint4'
###############################
   * Label: 'To Integer4'
   * Description: 'The <b>To Integer4</b> function converts four floating values to integers '
   * SDPropertyCategory = 'Input'
      * 'value' [CONNECTABLE, READ_ONLY]
         * Label: 'Value'
         * Types:
            * 'float4' (SDTypeFloat4)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'To Integer4'
         * Description: 'The <b>To Integer4</b> function converts four floating values to integers '
         * Types:
            * 'int4' (SDTypeInt4)

[46/84] 'sbs::function::add'
############################
   * Label: 'Add'
   * Description: 'The <b>Add</b> function adds two same type values: a+b'
   * SDPropertyCategory = 'Input'
      * 'a' [CONNECTABLE, READ_ONLY]
         * Label: 'A'
         * Types:
            * 'int' (SDTypeInt)
            * 'int2' (SDTypeInt2)
            * 'int3' (SDTypeInt3)
            * 'int4' (SDTypeInt4)
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

      * 'b' [CONNECTABLE, READ_ONLY]
         * Label: 'B'
         * Types:
            * 'int' (SDTypeInt)
            * 'int2' (SDTypeInt2)
            * 'int3' (SDTypeInt3)
            * 'int4' (SDTypeInt4)
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Add'
         * Description: 'The <b>Add</b> function adds two same type values: a+b'
         * Types:
            * 'int' (SDTypeInt)
            * 'int2' (SDTypeInt2)
            * 'int3' (SDTypeInt3)
            * 'int4' (SDTypeInt4)
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

[47/84] 'sbs::function::sub'
############################
   * Label: 'Subtraction'
   * Description: 'The <b>Subtraction</b> function substracts two same type values: a-b'
   * SDPropertyCategory = 'Input'
      * 'a' [CONNECTABLE, READ_ONLY]
         * Label: 'A'
         * Types:
            * 'int' (SDTypeInt)
            * 'int2' (SDTypeInt2)
            * 'int3' (SDTypeInt3)
            * 'int4' (SDTypeInt4)
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

      * 'b' [CONNECTABLE, READ_ONLY]
         * Label: 'B'
         * Types:
            * 'int' (SDTypeInt)
            * 'int2' (SDTypeInt2)
            * 'int3' (SDTypeInt3)
            * 'int4' (SDTypeInt4)
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Subtraction'
         * Description: 'The <b>Subtraction</b> function substracts two same type values: a-b'
         * Types:
            * 'int' (SDTypeInt)
            * 'int2' (SDTypeInt2)
            * 'int3' (SDTypeInt3)
            * 'int4' (SDTypeInt4)
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

[48/84] 'sbs::function::mul'
############################
   * Label: 'Multiplication'
   * Description: 'The <b>Multiplication</b> function multiplies two same type values: a × b'
   * SDPropertyCategory = 'Input'
      * 'a' [CONNECTABLE, READ_ONLY]
         * Label: 'A'
         * Types:
            * 'int' (SDTypeInt)
            * 'int2' (SDTypeInt2)
            * 'int3' (SDTypeInt3)
            * 'int4' (SDTypeInt4)
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

      * 'b' [CONNECTABLE, READ_ONLY]
         * Label: 'B'
         * Types:
            * 'int' (SDTypeInt)
            * 'int2' (SDTypeInt2)
            * 'int3' (SDTypeInt3)
            * 'int4' (SDTypeInt4)
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Multiplication'
         * Description: 'The <b>Multiplication</b> function multiplies two same type values: a × b'
         * Types:
            * 'int' (SDTypeInt)
            * 'int2' (SDTypeInt2)
            * 'int3' (SDTypeInt3)
            * 'int4' (SDTypeInt4)
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

[49/84] 'sbs::function::mulscalar'
##################################
   * Label: 'Scalar Multiplication'
   * Description: 'The <b>Scalar Multiplication</b> function multiplies each component of the input <b>Vector</b> by the same scalar value <b>Scale</b>'
   * SDPropertyCategory = 'Input'
      * 'a' [CONNECTABLE, READ_ONLY]
         * Label: 'Vector'
         * Types:
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

      * 'scalar' [CONNECTABLE, READ_ONLY]
         * Label: 'Scale'
         * Types:
            * 'float' (SDTypeFloat)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Scalar Multiplication'
         * Description: 'The <b>Scalar Multiplication</b> function multiplies each component of the input <b>Vector</b> by the same scalar value <b>Scale</b>'
         * Types:
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

[50/84] 'sbs::function::div'
############################
   * Label: 'Division'
   * Description: 'The <b>Division</b> function divides two same type values: a/b'
   * SDPropertyCategory = 'Input'
      * 'a' [CONNECTABLE, READ_ONLY]
         * Label: 'A'
         * Types:
            * 'int' (SDTypeInt)
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

      * 'b' [CONNECTABLE, READ_ONLY]
         * Label: 'B'
         * Types:
            * 'int' (SDTypeInt)
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Division'
         * Description: 'The <b>Division</b> function divides two same type values: a/b'
         * Types:
            * 'int' (SDTypeInt)
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

[51/84] 'sbs::function::neg'
############################
   * Label: 'Negation'
   * Description: 'The <b>Negation</b> function returns the opposite value of its input: -X'
   * SDPropertyCategory = 'Input'
      * 'a' [CONNECTABLE, READ_ONLY]
         * Label: 'X'
         * Types:
            * 'int' (SDTypeInt)
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Negation'
         * Description: 'The <b>Negation</b> function returns the opposite value of its input: -X'
         * Types:
            * 'int' (SDTypeInt)
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

[52/84] 'sbs::function::mod'
############################
   * Label: 'Modulo'
   * Description: 'The <b>Modulo</b> function returns modulo of entry value: mod(a,divisor)'
   * SDPropertyCategory = 'Input'
      * 'a' [CONNECTABLE, READ_ONLY]
         * Label: 'A'
         * Types:
            * 'int' (SDTypeInt)
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

      * 'b' [CONNECTABLE, READ_ONLY]
         * Label: 'Divisor'
         * Types:
            * 'int' (SDTypeInt)
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Modulo'
         * Description: 'The <b>Modulo</b> function returns modulo of entry value: mod(a,divisor)'
         * Types:
            * 'int' (SDTypeInt)
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

[53/84] 'sbs::function::dot'
############################
   * Label: 'Dot Product'
   * Description: 'The <b>Dot product</b> function returns dot product between two same type values: dot(a,b)'
   * SDPropertyCategory = 'Input'
      * 'a' [CONNECTABLE, READ_ONLY]
         * Label: 'A'
         * Types:
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

      * 'b' [CONNECTABLE, READ_ONLY]
         * Label: 'B'
         * Types:
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Dot Product'
         * Description: 'The <b>Dot product</b> function returns dot product between two same type values: dot(a,b)'
         * Types:
            * 'float' (SDTypeFloat)

[54/84] 'sbs::function::and'
############################
   * Label: 'And'
   * Description: 'The <b>And</b> function returns true if the two boolean entries values are true: a&b'
   * SDPropertyCategory = 'Input'
      * 'a' [CONNECTABLE, READ_ONLY]
         * Label: 'A'
         * Types:
            * 'bool' (SDTypeBool)

      * 'b' [CONNECTABLE, READ_ONLY]
         * Label: 'B'
         * Types:
            * 'bool' (SDTypeBool)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'And'
         * Description: 'The <b>And</b> function returns true if the two boolean entries values are true: a&b'
         * Types:
            * 'bool' (SDTypeBool)

[55/84] 'sbs::function::or'
###########################
   * Label: 'Or'
   * Description: 'The <b>Or</b> function returns true if one of the two boolean entries values are true: a|b'
   * SDPropertyCategory = 'Input'
      * 'a' [CONNECTABLE, READ_ONLY]
         * Label: 'A'
         * Types:
            * 'bool' (SDTypeBool)

      * 'b' [CONNECTABLE, READ_ONLY]
         * Label: 'B'
         * Types:
            * 'bool' (SDTypeBool)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Or'
         * Description: 'The <b>Or</b> function returns true if one of the two boolean entries values are true: a|b'
         * Types:
            * 'bool' (SDTypeBool)

[56/84] 'sbs::function::not'
############################
   * Label: 'Not'
   * Description: 'The <b>Not</b> function returns the negation boolean of entry: !x'
   * SDPropertyCategory = 'Input'
      * 'a' [CONNECTABLE, READ_ONLY]
         * Label: 'A'
         * Types:
            * 'bool' (SDTypeBool)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Not'
         * Description: 'The <b>Not</b> function returns the negation boolean of entry: !x'
         * Types:
            * 'bool' (SDTypeBool)

[57/84] 'sbs::function::eq'
###########################
   * Label: 'Equal'
   * Description: 'The <b>Equal</b> function returns true if entries values are equal: a=b'
   * SDPropertyCategory = 'Input'
      * 'a' [CONNECTABLE, READ_ONLY]
         * Label: 'A'
         * Types:
            * 'int' (SDTypeInt)
            * 'float' (SDTypeFloat)

      * 'b' [CONNECTABLE, READ_ONLY]
         * Label: 'B'
         * Types:
            * 'int' (SDTypeInt)
            * 'float' (SDTypeFloat)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Equal'
         * Description: 'The <b>Equal</b> function returns true if entries values are equal: a=b'
         * Types:
            * 'bool' (SDTypeBool)

[58/84] 'sbs::function::noteq'
##############################
   * Label: 'Not Equal'
   * Description: 'The <b>Not Equal</b> function returns true if entries values are different: a ≠ b'
   * SDPropertyCategory = 'Input'
      * 'a' [CONNECTABLE, READ_ONLY]
         * Label: 'A'
         * Types:
            * 'int' (SDTypeInt)
            * 'float' (SDTypeFloat)

      * 'b' [CONNECTABLE, READ_ONLY]
         * Label: 'B'
         * Types:
            * 'int' (SDTypeInt)
            * 'float' (SDTypeFloat)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Not Equal'
         * Description: 'The <b>Not Equal</b> function returns true if entries values are different: a ≠ b'
         * Types:
            * 'bool' (SDTypeBool)

[59/84] 'sbs::function::gt'
###########################
   * Label: 'Greater'
   * Description: 'The <b>Greater</b> function returns true if first entry is greater than second entry: a>b'
   * SDPropertyCategory = 'Input'
      * 'a' [CONNECTABLE, READ_ONLY]
         * Label: 'A'
         * Types:
            * 'int' (SDTypeInt)
            * 'float' (SDTypeFloat)

      * 'b' [CONNECTABLE, READ_ONLY]
         * Label: 'B'
         * Types:
            * 'int' (SDTypeInt)
            * 'float' (SDTypeFloat)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Greater'
         * Description: 'The <b>Greater</b> function returns true if first entry is greater than second entry: a>b'
         * Types:
            * 'bool' (SDTypeBool)

[60/84] 'sbs::function::gteq'
#############################
   * Label: 'Greater or Equal'
   * Description: 'The <b>Greater or Equal</b> function returns true if first entry is greater than second entry or equal: a ≥ b'
   * SDPropertyCategory = 'Input'
      * 'a' [CONNECTABLE, READ_ONLY]
         * Label: 'A'
         * Types:
            * 'int' (SDTypeInt)
            * 'float' (SDTypeFloat)

      * 'b' [CONNECTABLE, READ_ONLY]
         * Label: 'B'
         * Types:
            * 'int' (SDTypeInt)
            * 'float' (SDTypeFloat)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Greater or Equal'
         * Description: 'The <b>Greater or Equal</b> function returns true if first entry is greater than second entry or equal: a ≥ b'
         * Types:
            * 'bool' (SDTypeBool)

[61/84] 'sbs::function::lr'
###########################
   * Label: 'Lower'
   * Description: 'The <b>Lower</b> function returns true if first entry is lower than second entry: a &lt b'
   * SDPropertyCategory = 'Input'
      * 'a' [CONNECTABLE, READ_ONLY]
         * Label: 'A'
         * Types:
            * 'int' (SDTypeInt)
            * 'float' (SDTypeFloat)

      * 'b' [CONNECTABLE, READ_ONLY]
         * Label: 'B'
         * Types:
            * 'int' (SDTypeInt)
            * 'float' (SDTypeFloat)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Lower'
         * Description: 'The <b>Lower</b> function returns true if first entry is lower than second entry: a &lt b'
         * Types:
            * 'bool' (SDTypeBool)

[62/84] 'sbs::function::lreq'
#############################
   * Label: 'Lower or Equal'
   * Description: 'The <b>Lower or Equal</b> function returns true if first entry is lower than second entry or equal: a ≤ b'
   * SDPropertyCategory = 'Input'
      * 'a' [CONNECTABLE, READ_ONLY]
         * Label: 'A'
         * Types:
            * 'int' (SDTypeInt)
            * 'float' (SDTypeFloat)

      * 'b' [CONNECTABLE, READ_ONLY]
         * Label: 'B'
         * Types:
            * 'int' (SDTypeInt)
            * 'float' (SDTypeFloat)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Lower or Equal'
         * Description: 'The <b>Lower or Equal</b> function returns true if first entry is lower than second entry or equal: a ≤ b'
         * Types:
            * 'bool' (SDTypeBool)

[63/84] 'sbs::function::abs'
############################
   * Label: 'Absolute'
   * Description: 'The <b>Absolute</b> function returns the absolute value of its input: abs(X)'
   * SDPropertyCategory = 'Input'
      * 'a' [CONNECTABLE, READ_ONLY]
         * Label: 'X'
         * Types:
            * 'int' (SDTypeInt)
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Absolute'
         * Description: 'The <b>Absolute</b> function returns the absolute value of its input: abs(X)'
         * Types:
            * 'int' (SDTypeInt)
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

[64/84] 'sbs::function::floor'
##############################
   * Label: 'Floor'
   * Description: 'The <b>Floor</b> function rounds its input value down. It returns the largest integer value not greater than X: floor(X)'
   * SDPropertyCategory = 'Input'
      * 'a' [CONNECTABLE, READ_ONLY]
         * Label: 'X'
         * Types:
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Floor'
         * Description: 'The <b>Floor</b> function rounds its input value down. It returns the largest integer value not greater than X: floor(X)'
         * Types:
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

[65/84] 'sbs::function::ceil'
#############################
   * Label: 'Ceil'
   * Description: 'The <b>Ceil</b> function rounds its input value up. It returns the smallest integer value not less than X: ceil(X)'
   * SDPropertyCategory = 'Input'
      * 'a' [CONNECTABLE, READ_ONLY]
         * Label: 'X'
         * Types:
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Ceil'
         * Description: 'The <b>Ceil</b> function rounds its input value up. It returns the smallest integer value not less than X: ceil(X)'
         * Types:
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

[66/84] 'sbs::function::cos'
############################
   * Label: 'Cosine'
   * Description: 'The <b>Cosine</b> function returns the cosine value of its input value in radians: cos(X)'
   * SDPropertyCategory = 'Input'
      * 'a' [CONNECTABLE, READ_ONLY]
         * Label: 'X'
         * Types:
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Cosine'
         * Description: 'The <b>Cosine</b> function returns the cosine value of its input value in radians: cos(X)'
         * Types:
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

[67/84] 'sbs::function::sin'
############################
   * Label: 'Sine'
   * Description: 'The <b>Sine</b> function returns the sine value of its input value in radians: sin(X)'
   * SDPropertyCategory = 'Input'
      * 'a' [CONNECTABLE, READ_ONLY]
         * Label: 'X'
         * Types:
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Sine'
         * Description: 'The <b>Sine</b> function returns the sine value of its input value in radians: sin(X)'
         * Types:
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

[68/84] 'sbs::function::tan'
############################
   * Label: 'Tangent'
   * Description: 'The <b>Tangent</b> function returns the tangent value of its input value in radians: tan(X)'
   * SDPropertyCategory = 'Input'
      * 'a' [CONNECTABLE, READ_ONLY]
         * Label: 'X'
         * Types:
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Tangent'
         * Description: 'The <b>Tangent</b> function returns the tangent value of its input value in radians: tan(X)'
         * Types:
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

[69/84] 'sbs::function::atan2'
##############################
   * Label: 'Arc Tangent 2'
   * Description: 'The <b>Arc Tangent 2</b> function returns the angle in radians between the 2D vector <b>Vector</b> and the horizontal. (No need to switch x and y as in the usual atan2 function.)<br/>It is the reciprocal of the <b>Cartesian</b> function'
   * SDPropertyCategory = 'Input'
      * 'a' [CONNECTABLE, READ_ONLY]
         * Label: 'Vector'
         * Types:
            * 'float2' (SDTypeFloat2)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Arc Tangent 2'
         * Description: 'The <b>Arc Tangent 2</b> function returns the angle in radians between the 2D vector <b>Vector</b> and the horizontal. (No need to switch x and y as in the usual atan2 function.)<br/>It is the reciprocal of the <b>Cartesian</b> function'
         * Types:
            * 'float' (SDTypeFloat)

[70/84] 'sbs::function::cartesian'
##################################
   * Label: 'Cartesian'
   * Description: 'The <b>Cartesian</b> function converts polar coordinates to cartesian coordinates. (Polar coordinates are a distance from the origin and an angle in radians from the horizontal.)<br/>It is the reciprocal of the <b>Arc Tangent 2</b> function: <nobr>Length × Float2(cos(Angle), sin(Angle))</nobr>'
   * SDPropertyCategory = 'Input'
      * 'rho' [CONNECTABLE, READ_ONLY]
         * Label: 'Length'
         * Types:
            * 'float' (SDTypeFloat)

      * 'theta' [CONNECTABLE, READ_ONLY]
         * Label: 'Angle'
         * Types:
            * 'float' (SDTypeFloat)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Cartesian'
         * Description: 'The <b>Cartesian</b> function converts polar coordinates to cartesian coordinates. (Polar coordinates are a distance from the origin and an angle in radians from the horizontal.)<br/>It is the reciprocal of the <b>Arc Tangent 2</b> function: <nobr>Length × Float2(cos(Angle), sin(Angle))</nobr>'
         * Types:
            * 'float2' (SDTypeFloat2)

[71/84] 'sbs::function::sqrt'
#############################
   * Label: 'Square Root'
   * Description: 'The <b>Square Root</b> function returns the square root of its input value: √X'
   * SDPropertyCategory = 'Input'
      * 'a' [CONNECTABLE, READ_ONLY]
         * Label: 'X'
         * Types:
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Square Root'
         * Description: 'The <b>Square Root</b> function returns the square root of its input value: √X'
         * Types:
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

[72/84] 'sbs::function::log'
############################
   * Label: 'Logarithm'
   * Description: 'The <b>Logarithm</b> function returns the natural logarithm of its input value: ln(X)'
   * SDPropertyCategory = 'Input'
      * 'a' [CONNECTABLE, READ_ONLY]
         * Label: 'X'
         * Types:
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Logarithm'
         * Description: 'The <b>Logarithm</b> function returns the natural logarithm of its input value: ln(X)'
         * Types:
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

[73/84] 'sbs::function::exp'
############################
   * Label: 'Exponential'
   * Description: 'The <b>Exponential</b> function returns the exponential value of its input value: <i>e</i><sup>X</sup> (with <i>e</i> ≈ 2.7182818)'
   * SDPropertyCategory = 'Input'
      * 'a' [CONNECTABLE, READ_ONLY]
         * Label: 'X'
         * Types:
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Exponential'
         * Description: 'The <b>Exponential</b> function returns the exponential value of its input value: <i>e</i><sup>X</sup> (with <i>e</i> ≈ 2.7182818)'
         * Types:
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

[74/84] 'sbs::function::log2'
#############################
   * Label: 'Logarithm base 2'
   * Description: 'The <b>Log2</b> function returns the <nobr>base 2</nobr> logarithm of its input value: log2(X)'
   * SDPropertyCategory = 'Input'
      * 'a' [CONNECTABLE, READ_ONLY]
         * Label: 'X'
         * Types:
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Logarithm base 2'
         * Description: 'The <b>Log2</b> function returns the <nobr>base 2</nobr> logarithm of its input value: log2(X)'
         * Types:
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

[75/84] 'sbs::function::pow2'
#############################
   * Label: '2Pow'
   * Description: 'The <b>2Pow</b> function returns 2 to the power of its input value: 2<sup>X</sup>'
   * SDPropertyCategory = 'Input'
      * 'a' [CONNECTABLE, READ_ONLY]
         * Label: 'X'
         * Types:
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: '2Pow'
         * Description: 'The <b>2Pow</b> function returns 2 to the power of its input value: 2<sup>X</sup>'
         * Types:
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

[76/84] 'sbs::function::pow'
############################
   * Label: 'Pow'
   * Description: 'The <b>Pow</b> function returns the first input raised to the power of the second input: X<sup>Y</sup>'
   * SDPropertyCategory = 'Input'
      * 'a' [CONNECTABLE, READ_ONLY]
         * Label: 'X'
         * Types:
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

      * 'b' [CONNECTABLE, READ_ONLY]
         * Label: 'Y'
         * Types:
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Pow'
         * Description: 'The <b>Pow</b> function returns the first input raised to the power of the second input: X<sup>Y</sup>'
         * Types:
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

[77/84] 'sbs::function::lerp'
#############################
   * Label: 'Linear Interpolation'
   * Description: 'The <b>Linear Interpolation</b> function returns the linear interpolation between two values in function of a floating value: (1-x)a+x × b'
   * SDPropertyCategory = 'Input'
      * 'a' [CONNECTABLE, READ_ONLY]
         * Label: 'A'
         * Types:
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

      * 'b' [CONNECTABLE, READ_ONLY]
         * Label: 'B'
         * Types:
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

      * 'x' [CONNECTABLE, READ_ONLY]
         * Label: 'X'
         * Types:
            * 'float' (SDTypeFloat)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Linear Interpolation'
         * Description: 'The <b>Linear Interpolation</b> function returns the linear interpolation between two values in function of a floating value: (1-x)a+x × b'
         * Types:
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

[78/84] 'sbs::function::min'
############################
   * Label: 'Minimum'
   * Description: 'The <b>Minimum</b> function returns minimum value of entries values: min(a,b)'
   * SDPropertyCategory = 'Input'
      * 'a' [CONNECTABLE, READ_ONLY]
         * Label: 'A'
         * Types:
            * 'int' (SDTypeInt)
            * 'int2' (SDTypeInt2)
            * 'int3' (SDTypeInt3)
            * 'int4' (SDTypeInt4)
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

      * 'b' [CONNECTABLE, READ_ONLY]
         * Label: 'B'
         * Types:
            * 'int' (SDTypeInt)
            * 'int2' (SDTypeInt2)
            * 'int3' (SDTypeInt3)
            * 'int4' (SDTypeInt4)
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Minimum'
         * Description: 'The <b>Minimum</b> function returns minimum value of entries values: min(a,b)'
         * Types:
            * 'int' (SDTypeInt)
            * 'int2' (SDTypeInt2)
            * 'int3' (SDTypeInt3)
            * 'int4' (SDTypeInt4)
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

[79/84] 'sbs::function::max'
############################
   * Label: 'Maximum'
   * Description: 'The <b>Maximum</b> function returns maximum value of entries values: max(a,b)'
   * SDPropertyCategory = 'Input'
      * 'a' [CONNECTABLE, READ_ONLY]
         * Label: 'A'
         * Types:
            * 'int' (SDTypeInt)
            * 'int2' (SDTypeInt2)
            * 'int3' (SDTypeInt3)
            * 'int4' (SDTypeInt4)
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

      * 'b' [CONNECTABLE, READ_ONLY]
         * Label: 'B'
         * Types:
            * 'int' (SDTypeInt)
            * 'int2' (SDTypeInt2)
            * 'int3' (SDTypeInt3)
            * 'int4' (SDTypeInt4)
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Maximum'
         * Description: 'The <b>Maximum</b> function returns maximum value of entries values: max(a,b)'
         * Types:
            * 'int' (SDTypeInt)
            * 'int2' (SDTypeInt2)
            * 'int3' (SDTypeInt3)
            * 'int4' (SDTypeInt4)
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)

[80/84] 'sbs::function::rand'
#############################
   * Label: 'Random'
   * Description: 'The <b>Random</b> function generates a random value between 0 and the input value <b>X</b>'
   * SDPropertyCategory = 'Input'
      * 'a' [CONNECTABLE, READ_ONLY]
         * Label: 'X'
         * Types:
            * 'float' (SDTypeFloat)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Random'
         * Description: 'The <b>Random</b> function generates a random value between 0 and the input value <b>X</b>'
         * Types:
            * 'float' (SDTypeFloat)

[81/84] 'sbs::function::sequence'
#################################
   * Label: 'Sequence'
   * Description: 'The <b>Sequence</b> node ensures a portion of a Substance function graph (<b>In</b>) is computed <i>before</i> another portion (<b>Last</b>). The node then outputs the <b>Last</b> value.'
   * SDPropertyCategory = 'Input'
      * 'seqin' [CONNECTABLE, READ_ONLY]
         * Label: 'In'
         * Types:
            * 'bool' (SDTypeBool)
            * 'int' (SDTypeInt)
            * 'int2' (SDTypeInt2)
            * 'int3' (SDTypeInt3)
            * 'int4' (SDTypeInt4)
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)
            * 'string' (SDTypeString)
            * 'void' (SDTypeVoid)

      * 'seqlast' [CONNECTABLE, READ_ONLY]
         * Label: 'Last'
         * Types:
            * 'bool' (SDTypeBool)
            * 'int' (SDTypeInt)
            * 'int2' (SDTypeInt2)
            * 'int3' (SDTypeInt3)
            * 'int4' (SDTypeInt4)
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)
            * 'string' (SDTypeString)
            * 'void' (SDTypeVoid)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Sequence'
         * Description: 'The <b>Sequence</b> node ensures a portion of a Substance function graph (<b>In</b>) is computed <i>before</i> another portion (<b>Last</b>). The node then outputs the <b>Last</b> value.'
         * Types:
            * 'bool' (SDTypeBool)
            * 'int' (SDTypeInt)
            * 'int2' (SDTypeInt2)
            * 'int3' (SDTypeInt3)
            * 'int4' (SDTypeInt4)
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)
            * 'string' (SDTypeString)
            * 'void' (SDTypeVoid)

[82/84] 'sbs::function::ifelse'
###############################
   * Label: 'If...Else'
   * Description: 'The <b>If...Else</b> function returns the second value if the boolean entry is true else returns the third entry'
   * SDPropertyCategory = 'Input'
      * 'condition' [CONNECTABLE, READ_ONLY]
         * Label: 'Condition'
         * Types:
            * 'bool' (SDTypeBool)

      * 'ifpath' [CONNECTABLE, READ_ONLY]
         * Label: 'If'
         * Types:
            * 'bool' (SDTypeBool)
            * 'int' (SDTypeInt)
            * 'int2' (SDTypeInt2)
            * 'int3' (SDTypeInt3)
            * 'int4' (SDTypeInt4)
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)
            * 'string' (SDTypeString)
            * 'void' (SDTypeVoid)

      * 'elsepath' [CONNECTABLE, READ_ONLY]
         * Label: 'Else'
         * Types:
            * 'bool' (SDTypeBool)
            * 'int' (SDTypeInt)
            * 'int2' (SDTypeInt2)
            * 'int3' (SDTypeInt3)
            * 'int4' (SDTypeInt4)
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)
            * 'string' (SDTypeString)
            * 'void' (SDTypeVoid)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'If...Else'
         * Description: 'The <b>If...Else</b> function returns the second value if the boolean entry is true else returns the third entry'
         * Types:
            * 'bool' (SDTypeBool)
            * 'int' (SDTypeInt)
            * 'int2' (SDTypeInt2)
            * 'int3' (SDTypeInt3)
            * 'int4' (SDTypeInt4)
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)
            * 'string' (SDTypeString)
            * 'void' (SDTypeVoid)

[83/84] 'sbs::function::while'
##############################
   * Label: 'While Loop'
   * Description: 'The <b>While Loop</b> node will execute the <b>Init</b> branch once, 			then iterate over the <b>Exit Cond.</b> and <b>Loop Body</b> branches until the <b>Exit Cond.</b> 			branch returns true<br>Nodes connected to the <b>Exit Cond.</b> and <b>Loop Body</b> branches <b>cannot</b> 			be connected to other branches of the graph.<br>Loops have an implicit maximum number of iterations which 			can be disabled by setting it to -1.'
   * SDPropertyCategory = 'Input'
      * 'init' [CONNECTABLE, READ_ONLY]
         * Label: 'Init'
         * Types:
            * 'bool' (SDTypeBool)
            * 'int' (SDTypeInt)
            * 'int2' (SDTypeInt2)
            * 'int3' (SDTypeInt3)
            * 'int4' (SDTypeInt4)
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)
            * 'string' (SDTypeString)
            * 'void' (SDTypeVoid)

      * 'cond' [CONNECTABLE, READ_ONLY]
         * Label: 'Exit Cond.'
         * Types:
            * 'bool' (SDTypeBool)

      * 'loop' [CONNECTABLE, READ_ONLY]
         * Label: 'Loop Body'
         * Types:
            * 'bool' (SDTypeBool)
            * 'int' (SDTypeInt)
            * 'int2' (SDTypeInt2)
            * 'int3' (SDTypeInt3)
            * 'int4' (SDTypeInt4)
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)
            * 'string' (SDTypeString)
            * 'void' (SDTypeVoid)

      * '__constant__' = SDValueInt(int(0))
         * Label: 'Constant'
         * Types:
            * 'int' (SDTypeInt)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'While Loop'
         * Description: 'The <b>While Loop</b> node will execute the <b>Init</b> branch once, 			then iterate over the <b>Exit Cond.</b> and <b>Loop Body</b> branches until the <b>Exit Cond.</b> 			branch returns true<br>Nodes connected to the <b>Exit Cond.</b> and <b>Loop Body</b> branches <b>cannot</b> 			be connected to other branches of the graph.<br>Loops have an implicit maximum number of iterations which 			can be disabled by setting it to -1.'
         * Types:
            * 'bool' (SDTypeBool)
            * 'int' (SDTypeInt)
            * 'int2' (SDTypeInt2)
            * 'int3' (SDTypeInt3)
            * 'int4' (SDTypeInt4)
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)
            * 'string' (SDTypeString)
            * 'void' (SDTypeVoid)

[84/84] 'sbs::function::passthrough'
####################################
   * Label: 'Dot'
   * Description: 'The <b>Dot</b> function is doing a passthrough (output=input)'
   * SDPropertyCategory = 'Input'
      * 'input' [CONNECTABLE, READ_ONLY]
         * Label: 'Input'
         * Types:
            * 'bool' (SDTypeBool)
            * 'int' (SDTypeInt)
            * 'int2' (SDTypeInt2)
            * 'int3' (SDTypeInt3)
            * 'int4' (SDTypeInt4)
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)
            * 'string' (SDTypeString)
            * 'void' (SDTypeVoid)

   * SDPropertyCategory = 'Output'
      * 'unique_filter_output' [CONNECTABLE, READ_ONLY]
         * Label: 'Dot'
         * Description: 'The <b>Dot</b> function is doing a passthrough (output=input)'
         * Types:
            * 'bool' (SDTypeBool)
            * 'int' (SDTypeInt)
            * 'int2' (SDTypeInt2)
            * 'int3' (SDTypeInt3)
            * 'int4' (SDTypeInt4)
            * 'float' (SDTypeFloat)
            * 'float2' (SDTypeFloat2)
            * 'float3' (SDTypeFloat3)
            * 'float4' (SDTypeFloat4)
            * 'string' (SDTypeString)
            * 'void' (SDTypeVoid)
